#!/usr/bin/env node
'use strict'

const fs = require('fs')
const path = require('path')
const program = require('commander')
const readlineSync = require('readline-sync')
const Formatter = require('../libs/formatter')
let _package = {}
try {
  _package = JSON.parse(fs.readFileSync(path.resolve('package.json')))
} catch (e) {}

const inputKey = (formatter) => (key) => {
  'name', 'version'
  if (key === 'applications') {
    while (1) {
      const id = readlineSync.question('Type your extension id :')
      formatter.fillMustKey('applications', id)
      if (formatter.checkApplicationsKeyFormat()) break
      console.log(`Your extension id "${id}" is invalid`)
      console.log(`ex: addon-name@yourdomain.net`)
    }
  }
  if (key === 'manifest_version') {
    formatter.fillMustKey('manifest_version', 2)
  }
  if (key === 'name') {
    let name = _package.name || ''
    name = readlineSync.question(`Type your extension name (default: ${name}) :`) || _package.name
    formatter.fillMustKey('name', name)
  }
  if (key === 'version') {
    let version = _package.version || ''
    version = readlineSync.question(`Type your extension version (default: ${version}) :`) || _package.version
    formatter.fillMustKey('version', version)
  }
}

const RESET_COLOR = '\u001b[0m'
const WARNING_COLOR = '\u001b[33m'
const RECOMMEND_COLOR = '\u001b[34m'
const ERROR_COLOR = '\u001b[31m'

const WARNING_TEXT = `${WARNING_COLOR}WARNING${RESET_COLOR}`
const RECOMMEND_TEXT = `${RECOMMEND_COLOR}RECOMMEND${RESET_COLOR}`
const ERROR_TEXT = `${ERROR_COLOR}ERROR${RESET_COLOR}`

program
  .usage('<packageJsonPath> [options]')
  .version(require('../package.json').version)
  .option('--validate', 'Only validate manifest.json')
  .option('-O --output <path>', 'Output manifest.json path')
  .option('-U --update', 'Update manifest.json itself')
  .option('--browser <browser-name>', 'Set target browser (chrome|firefox|edge) default: firefox')
  .action((packageJsonPath) => {
    const browser = program.browser
    if (browser !== undefined && !/^(chrome|firefox|edge)$/.test(browser)) {
      console.error('You should choose browser from [chrome,firefox,edge]')
      process.exit(1)
    }
    const formatter = new Formatter(packageJsonPath, browser)
    if (formatter.recommendMessage.length > 0) {
      console.warn(RECOMMEND_TEXT + ': ' + formatter.recommendMessage.join('\n' + RECOMMEND_TEXT + ': '))
    }
    if (formatter.warningMessage.length > 0) {
      console.warn(WARNING_TEXT + ': ' + formatter.warningMessage.join('\n' + WARNING_TEXT + ': '))
    }
    if (program.validate) {
      if (!formatter.validator()) {
        console.error(ERROR_TEXT + ': ' + formatter.errorMessages.join('\n' + ERROR_TEXT + ': '))
        process.exit(1)
      }
      return
    }
    formatter.deleteUnsupportedKey()
    formatter.deleteUnsupportedProps()
    formatter.shouldContainKeys.forEach(inputKey(formatter))
    if (program.update) {
      program.output = packageJsonPath
    }
    if (formatter.unSupportedKeys.length > 0) {
      console.error(formatter.unSupportedKeys.join('\n'))
      process.exit(1)
    } else if (program.output) {
      try {
        fs.writeFileSync(path.resolve(program.output), JSON.stringify(formatter.json, null, 2))
      } catch (e) {
        console.error(e)
        process.exit(1)
      }
    } else {
      console.log(JSON.stringify(formatter.json, null, 2))
    }
  })
program.parse(process.argv)
if (!program.args.length) {
  program.help()
}
